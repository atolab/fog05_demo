// Generated by CoffeeScript 2.1.1
(function() {
    //                          OpenSplice Web

  //    This software and documentation are Copyright 2010 to 2014 PrismTech
  //    Limited and its licensees. All rights reserved. See file:

  //                           docs/LICENSE_LGPL.html

  //    for full copyright notice and license terms.

  // coffez is a library that provides a few useful funcitonal abstractions such as Option and Try types

  var CFail, CFailure, CSome, CSuccess, None, ematch, get, match, omatch, root;

  root = this;

  root.coffez = {};

  // `Option` monad implementation.
  None = {};

  None.map = function(f) {
    return None;
  };

  None.foreach = function(f) {
    return None;
  };

  None.flatMap = function(f) {
    return None;
  };

  None.get = function() {
    return void 0;
  };

  None.getOrElse = function(f) {
    return f();
  };

  None.orElse = function(f) {
    return f();
  };

  None.isEmpty = function() {
    return true;
  };

  None.show = function() {
    return 'None';
  };

  CSome = class CSome {
    constructor(value1) {
      this.value = value1;
    }

    foreach(f) {
      return f(this.value);
    }

    map(f) {
      return new CSome(f(this.value));
    }

    flatMap(f) {
      return f(this.value);
    }

    get() {
      return this.value;
    }

    getOrElse(f) {
      return this.value;
    }

    orElse(f) {
      return this;
    }

    isEmpty() {
      return false;
    }

    show() {
      return 'Some(' + JSON.stringify(this.value) + ')';
    }

  };

  CFail = class CFail {
    constructor(what1) {
      this.what = what1;
    }

    map(f) {
      throw this.what;
    }

    flatMap(f) {
      throw this.what;
    }

    get() {
      throw this.what;
    }

    getOrElse(f) {
      throw this.what;
    }

    orElse(f) {
      throw this.what;
    }

    isEmpty() {
      throw this.what;
    }

  };

  // `Try` monad implementation.
  CSuccess = class CSuccess {
    constructor(value1) {
      this.value = value1;
    }

    map(f) {
      return f(this.value);
    }

    get() {
      return this.value;
    }

    getOrElse(f) {
      return this.value;
    }

    orElse(f) {
      return this;
    }

    isFailure() {
      return false;
    }

    isSuccess() {
      return true;
    }

    toOption() {
      return new CSome(this.value);
    }

    recover(f) {
      return this;
    }

  };

  CFailure = class CFailure {
    constructor(exception) {
      this.exception = exception;
    }

    map(f) {
      return None;
    }

    get() {
      return this.exception;
    }

    getOrElse(f) {
      return f();
    }

    orElse(f) {
      return f();
    }

    isFailure() {
      return true;
    }

    isSuccess() {
      return false;
    }

    toOption() {
      return None;
    }

    recover(f) {
      return f(this.exception);
    }

  };

  ematch = function(x, y) {
    if (y === void 0) {
      return true;
    } else {
      return x === y;
    }
  };

  omatch = function(a, b) {
    var e, k, m, v;
    m = true;
    for (k in a) {
      v = a[k];
      e = match(v, b[k]);
      m = m && e;
    }
    return m;
  };

  match = function(a, b) {
    switch (typeof a) {
      case 'object':
        switch (typeof b) {
          case 'object':
            return omatch(a, b);
          default:
            //if (Object.keys(a).length == Object.keys(b).length) then omatch(a, b) else false
            return false;
        }
        break;
      case 'function':
        return false;
      case 'undefined':
        return false;
      default:
        switch (typeof b) {
          case 'object':
            return false;
          case 'function':
            return false;
          case 'undefined':
            return true;
          default:
            return ematch(a, b);
        }
    }
  };

  get = function(map, key) {
    var v;
    v = map[key];
    if ((v != null) === true) {
      return new CSome(v);
    } else {
      return None;
    }
  };

  root.coffez.None = None;

  root.coffez.Some = function(value) {
    return new CSome(value);
  };

  root.coffez.Fail = function(what) {
    return new CFail(what);
  };

  root.coffez.Success = function(value) {
    return new CSuccess(value);
  };

  root.coffez.Failure = function(ex) {
    return new CFailure(ex);
  };

  root.coffez.match = match;

  root.coffez.get = get;

}).call(this);
